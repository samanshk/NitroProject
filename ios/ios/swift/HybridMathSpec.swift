///
/// HybridMathSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridMathSpec``
public protocol HybridMathSpec_protocol: AnyObject {
  // Properties
  var pi: Double { get }

  // Methods
  func add(a: Double, b: Double) throws -> Double
}

/// See ``HybridMathSpec``
public class HybridMathSpec_base: HybridObjectSpec {
  private weak var cxxWrapper: HybridMathSpec_cxx? = nil
  public func getCxxWrapper() -> HybridMathSpec_cxx {
  #if DEBUG
    guard self is HybridMathSpec else {
      fatalError("`self` is not a `HybridMathSpec`! Did you accidentally inherit from `HybridMathSpec_base` instead of `HybridMathSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridMathSpec_cxx(self as! HybridMathSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
  public var memorySize: Int { return 0 }
}

/**
 * A Swift base-protocol representing the Math HybridObject.
 * Implement this protocol to create Swift-based instances of Math.
 * ```swift
 * class HybridMath : HybridMathSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridMathSpec = HybridMathSpec_protocol & HybridMathSpec_base
